@page "/categories"

@using MagicItems.UI.Services
@using MagicItems.Shared.Models
@using MagicItems.Shared.DTOs
@using MagicItems.UI.ReusableComponents

@inject CategoryService CategoryService


@if (CategoryList != null)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h2">Magic Item Categories</MudText>

            <MudDivider></MudDivider>

            <NewCategoryCreation CreateNewCategory="CreateNewCategory"></NewCategoryCreation>

            <MudGrid Justify="Justify.FlexStart">
                @foreach (var item in CategoryList)
                {
                    <MudItem sm="12" md="6" lg="4">
                        <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                            <div style="display: flex; align-items: center;">
                                @if (editingCategoryId == item.Id)
                                {
                                    <MudTextField @bind-Value="@newName" Label="New category name" Variant="Variant.Outlined" Class="custom-text-field"></MudTextField>
                                }
                                else
                                {
                                    <MudText Typo="Typo.h4">@item.CategoryName</MudText>
                                }
                                <div style="margin-left: auto;">
                                    @if (editingCategoryId == item.Id)
                                    {
                                        <MudIconButton OnClick="(async () => await UpdateCategory(new Category(item.Id, newName)))" Icon="@Icons.Material.Filled.Done" aria-label="edit"></MudIconButton>
                                        <MudIconButton OnClick="CancelEditing" Icon="@Icons.Material.Filled.Close" aria-label="cancel"></MudIconButton>
                                    }
                                    else
                                    {
                                        <MudButton OnClick="() => StartEditing(item.Id, item.CategoryName)" Variant="Variant.Filled" Style="background-color: darkorange; color: white;" EndIcon="@Icons.Material.Filled.Edit">Edit</MudButton>
                                        <MudButton OnClick="(async () => await DeleteCategory(item.Id, item.CategoryName))" Variant="Variant.Filled" Style="background-color: red; color: white;" EndIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                                    }
                                </div>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>

    </MudContainer>
}
else
{
    <p>Loading...</p>
}

@code {
    private Category[]? CategoryList;
    //private CategoryDTO? categoryDTO = new CategoryDTO();
    private int? editingCategoryId = null; 
    private string newName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    protected async Task CreateNewCategory(CategoryDTO categoryDTO)
    {
        await CategoryService.CreateCategoryAsync(categoryDTO);
        await LoadCategories();
    }

    protected async Task DeleteCategory(int id, string name)
    {
        await CategoryService.DeleteCategoryAsync(id, name);
        await LoadCategories();
    }

    protected async Task UpdateCategory(Category updatedCategory)
    {
        await CategoryService.UpdateCategoryAsync(updatedCategory);
        editingCategoryId = null;
        await LoadCategories();
    }

    private void StartEditing(int id, string currentName)
    {
        editingCategoryId = id;
        newName = currentName; 
    }

    private void CancelEditing()
    {
        editingCategoryId = null; 
    }

    private async Task LoadCategories()
    {
        CategoryList = await CategoryService.GetCategoriesAsync();
    }
}
