@page "/items"

@using MagicItems.Shared.Models
@using MagicItems.UI.ReusableComponents
@using MagicItems.UI.Services

@inject ItemsService itemService


<h1>Magic Items</h1>

@if (ItemsList != null)
{
    <MudGrid Justify="Justify.FlexStart">
        <MudItem sm="12" md="6" lg="4">
            @foreach (var item in ItemsList)
            {
                <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                    <div style="display: flex; align-items: center;">
                        <MudText Typo="Typo.h4">@item.ItemName</MudText>
                        <div style="margin-left: auto;">
                            <!-- Placeholder for future buttons (Edit/Delete) -->
                            <!--OnClick="(async () => await DeleteCategory(item.Id, item.CategoryName))"-->
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary">Delete</MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudItem> 
        <MudItem sm="12" md="6" lg="4">
            <SimpleMagicItem Item="ItemsList[0]"></SimpleMagicItem>
        </MudItem>
    </MudGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    private Items[]? ItemsList;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        ItemsList = await itemService.GetItemsAsync();
    }

    private async Task EditItem(Items item)
    {
        // Logic to handle item edit
    }

    private async Task DeleteItem(Items item)
    {
        // Logic to handle item edit
    }
}

