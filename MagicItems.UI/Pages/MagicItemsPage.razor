@page "/items"

@using MagicItems.Shared.Models
@using MagicItems.UI.ReusableComponents
@using MagicItems.UI.Services

@inject ItemsService itemService

@if (ItemsList != null)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h2">Magic Item </MudText>
            <MudDivider></MudDivider>

            <div class="flex-align-center">
                <MudButton OnClick="async () => AddSwitch()" StartIcon="@Icons.Material.Filled.Add" Label="Add Item" Variant="Variant.Filled" Style="background-color: green; color: white;" EndIcon="@Icons.Material.Filled.Add" Size="Size.Large">Click here to add new item! </MudButton>
            </div>

            <ItemFilter OnFilterApplied="HandleFilterApplied" Row="true"></ItemFilter>

            <MudGrid Justify="Justify.FlexStart">
                <ItemListDisplayComponent ItemsList="ItemsList" ShowSwitch="ShowSwitch" EditSwitch="EditSwitch" DeleteItem="DeleteItem"></ItemListDisplayComponent>
                <MudItem sm="12" md="6" lg="5">
                    <ItemDisplayComponent Item="@shownItem"></ItemDisplayComponent>
                    @if (editingItem)
                    {
                        <ItemUpdatingComponent originalItemId="editingItemId" ItemToUpdate="itemToUpdate" OnEscape="async () => await CloseAdditionalWindow()" OnItemUpdated="async () => await LoadItems()"></ItemUpdatingComponent>
                    }
                    @if (addingItem)
                    {
                        <ItemToAddComponent OnEscape="async () => await CloseAdditionalWindow()" OnItemAdded="async () => await LoadItems()"></ItemToAddComponent>
                    }
                </MudItem>
            </MudGrid>
        </MudStack>
        
    </MudContainer>
}
else
{
    <p>Loading...</p>
}

@code {
    private Items[]? ItemsList;

    private Items? shownItem;
    private bool editingItem = false;
    private bool addingItem = false;

    private int editingItemId = 0;

    private ItemsDTO itemToUpdate = new ItemsDTO();

    private void HandleFilterApplied(Items[] items)
    {
        if (!(items.Length == 0))
        {
            ItemsList = items;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }
    private async Task LoadItems()
    {
        ItemsList = await itemService.GetItemsAsync();
    }

    private async Task PrepareItemToUpdate(Items item)
    {
        itemToUpdate.ItemName = item.ItemName;
        itemToUpdate.ShortDescription = item.ShortDescription;
        itemToUpdate.LongDescription = item.LongDescription;
        itemToUpdate.Price = item.Price;
        itemToUpdate.CategoryName = item.CategoryName;
        itemToUpdate.RarityName = item.RarityName;
    }

    private async Task EditSwitch(Items item)
    {
        shownItem = null;
        addingItem = false;

        editingItemId = item.Id;
        await PrepareItemToUpdate(item);

        editingItem = true;
    }

    private void AddSwitch()
    {
        shownItem = null;
        editingItem = false;

        addingItem = true;
    }
    private void ShowSwitch(Items itemToShow)
    {
        editingItem = false;
        addingItem = false;

        shownItem = itemToShow;
    }

    private async Task CloseAdditionalWindow()
    {
        editingItemId = 0;
        itemToUpdate = new ItemsDTO();
        editingItem = false;
        addingItem = false;
        shownItem = null;
    }

    private async Task DeleteItem(string itemName)
    {
        await itemService.DeleteItemAsync(itemName);
        if (shownItem is not null && shownItem.ItemName == itemName) shownItem = null;
        await LoadItems();
    }

}

