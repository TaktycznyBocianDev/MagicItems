@page "/shopCreate"

@using MagicItems.Shared.Models
@using MagicItems.UI.Services
@using MagicItems.UI.ReusableComponents
@using MudBlazor

@inject ISnackbar Snackbar
@inject ShopItemService ShopItemService
@inject CategoryService categoryService
@inject RarityServicecs raritiesService
@inject ItemsService itemService


<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4">Information about shop:</MudText>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField @bind-Value="shopName" T="string" Label="What is name of this shop?" Required="true" RequiredError="Shop have to have a name!" />
            <MudTextField @bind-Value="shopOwner" T="string" Label="Who runs this shop?" />
        </MudForm>
    </MudPaper>

    <div style="margin: 50px 0;"></div>

    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="6">
            <MudStack>
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">
                            Add items to shop:

                            <ItemFilter OnFilterApplied="HandleFilterApplied"></ItemFilter>
                            @foreach (var item in itemsListToPick)
                            {
                                <MudPaper Class="pa-3 align-baseline" Elevation="5" Outlined="true" Square="true">
                                    <div style="display: flex; align-items: center;">
                                        <MudText Typo="Typo.h4">@item.ItemName</MudText>
                                        <div style="margin-left: auto;">
                                            <MudIconButton Icon="@Icons.Material.Filled.Add" Title="Favorite" OnClick="@(() => AddItemToShopList(item))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="@Color.Primary" OnClick="@(async () => await ShowItem(item))" />
                                        </div>
                                    </div>
                                </MudPaper>
                            }
                        </MudText>
                    </MudStack>

                </MudPaper>

                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

                    <MudText Typo="Typo.h6">Add few random items to shop:</MudText>
                    <MudPaper Class="pa-1 ma-1" Elevation="0">
                        <MudText Typo="Typo.subtitle1">How many items should be added: </MudText>
                        <MudNumericField @bind-Value="howManyItems" Variant="Variant.Outlined" Step="1" Min="1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Title="Favorite" OnClick="@(() => GetRandomItemsAsync(howManyItems))" />
                    </MudPaper>

                </MudPaper>

            </MudStack>
        </MudItem>
        <MudItem xs="6">
            <MudStack Spacing="3">
                <MudPaper Class="pa-3 align-baseline" Elevation="5" Outlined="true" Square="true">
                    <MudItem>
                        @if (itemInShop.Count == 0)
                        {
                            <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                                <div style="display: flex; align-items: center;">
                                    <MudText Typo="Typo.h4">There are no items in shop yet!!</MudText>
                                </div>
                            </MudPaper>
                        }
                        else
                        {
                            @foreach (var item in itemInShop)
                            {
                                <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                                    <div style="display: flex; align-items: center;">
                                        <MudText Typo="Typo.h4">@item.ItemName</MudText>
                                        <div style="margin-left: auto;">
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Title="Favorite" OnClick="@(() => RemoveItemFromShopList(item))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="@Color.Primary" OnClick="@(async () => await ShowItem(item))" />
                                        </div>
                                    </div>
                                </MudPaper>
                            }
                        }
                    </MudItem>
                </MudPaper>
                <MudItem>
                    @if (itemToShow is not null)
                    {
                        <ItemDisplayComponent Item="itemToShow"></ItemDisplayComponent>
                    }
                </MudItem>
                <MudItem>
                    <div class="px-3 py-6 mud-elevation-16 rounded-xl fixed" style="bottom:20px;right:20px;">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large">Create and Open Shop!</MudButton>
                    </div>               
                </MudItem>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    MudForm form;
    bool success = false;
    string[] errors = { };

    private string shopName = string.Empty;
    private string shopOwner = string.Empty;
    private string message;

    private List<Items> itemInShop = new List<Items>();
    private List<Items> itemsListToPick = new List<Items>();
    private Category[] CategoryList = { };
    private Rarities[] RarityList = { };

    private Items? itemToShow;

    private int howManyItems = 5;


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadRarities();
        await LoadItemsToPickFrom();
    }

    private async Task LoadCategories()
    {
        CategoryList = await categoryService.GetCategoriesAsync();
    }

    private async Task LoadRarities()
    {
        RarityList = await raritiesService.GetRaritiesAsync();
    }

    private async Task LoadItemsToPickFrom()
    {
        var itemsFromDatabase = await itemService.GetItemsAsync();
        itemsListToPick = itemsFromDatabase.ToList();
    }

    private void HandleFilterApplied(Items[] items)
    {
        itemsListToPick = items.ToList();
    }

    private void AddItemToShopList(Items item)
    {
        if (!itemInShop.Contains(item))
        {
            itemInShop.Add(item);
            itemsListToPick.Remove(item);
        }
        else
        {
            Snackbar.Add("Item is already in shop!", Severity.Error);
        }

    }

    private void RemoveItemFromShopList(Items item)
    {
        itemInShop.Remove(item);

        if (!itemsListToPick.Contains(item)) itemsListToPick.Add(item);
    }

    public async Task GetRandomItemsAsync(int count)
    {
        var items = await itemService.GetItemsAsync();

        if (count > items.Count())
        {
            Snackbar.Add("You can order more items than all :D", Severity.Error);
            return;
        }

        var random = new Random();
        var randomItems = items.OrderBy(x => random.Next()).Take(count).ToList();

        foreach (var item in randomItems)
        {
            if (!itemInShop.Contains(item)) itemInShop.Add(item);
            Snackbar.Add("Items added (repetitions have been omitted)", Severity.Success);
        }
    }

    private async Task ShowItem(Items item)
    {
        itemToShow = item;
    }

}