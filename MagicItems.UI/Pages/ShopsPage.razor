@page "/shopPage"

@using MagicItems.Shared.Models
@using MagicItems.UI.Services
@using MagicItems.UI.ReusableComponents
@using MudBlazor

@inject ISnackbar Snackbar
@inject ShopItemService ShopItemService
@inject CategoryService categoryService
@inject RarityServicecs raritiesService
@inject ShopService shopService
@inject ItemsService itemService
@inject NavigationManager navigationManager
    
@if (shops is not null)
{
    <MudGrid Justify="Justify.FlexStart">

        <div style="padding: 10px;"></div>

        <MudItem sm="12" md="7" lg="7">
            <div style="min-height: 10px;"></div>
            <div style="display: flex; align-items: center;">
                <MudButton Href="/shopCreate" StartIcon="@Icons.Material.Filled.Add" Label="Add Item" Variant="Variant.Filled" Style="background-color: green; color: white;" EndIcon="@Icons.Material.Filled.Add" Size="Size.Large">Create new shop!</MudButton>
            </div>
            <div style="min-height: 10px;"></div>
            @foreach (var item in shops)
            {
                <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                    <div style="display: flex; align-items: center;">
                        <MudStack Spacing="3">
                            <MudText Typo="Typo.h4">@item.ShopName</MudText>
                            <MudText Typo="Typo.h5">The owner of shop is: @item.ShopOwner</MudText>
                        </MudStack>
                        <div style="margin-left: auto;">
                            <MudButton OnClick="(async () => await EditShop(item.ShopName))" Variant="Variant.Filled" Style="background-color: orange; color: white;" EndIcon="@Icons.Material.Filled.Edit" Size="Size.Medium">Edit</MudButton>
                            <MudButton OnClick="(async () => await ShowShop(item))" Variant="Variant.Filled" Style="background-color: deepskyblue; color: white;" EndIcon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Medium">Show</MudButton>
                            <MudButton OnClick="(async () => await DeleteShop(item.ShopName))" Variant="Variant.Filled" Style="background-color: red; color: white;" EndIcon="@Icons.Material.Filled.Delete" Size="Size.Medium">Delete</MudButton>

                            <MudButton OnClick="(async () => await GoToShopPage(item.ShopName))" Variant="Variant.Filled" Style="background-color: green; color: white;" EndIcon="@Icons.Material.Filled.ArrowRight">Go to shop page</MudButton>
                            
                        </div>
                    </div>
                </MudPaper>
            }
        </MudItem>
        <MudItem sm="12" md="6" lg="4">

            @if (showShop)
            {
                <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                <MudText Typo="Typo.h4">@shopToShow.ShopName</MudText>
                    @if (@shopToShow.ShopOwner != null && @shopToShow.ShopOwner != "")
                    {
                        <MudText Typo="Typo.h4">The owner of shop is: @shopToShow.ShopOwner</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h4">This shop dont have an owner.</MudText>
                        
                    }
                    
                @foreach (var item in itemsToShow)
                {
                        <MudPaper Class="pa-3 align-baseline" Elevation="3" Outlined="true" Square="true">
                            <div style="display: flex; align-items: center;">
                                <MudGrid Justify="Justify.SpaceEvenly">
                                    <MudItem>
                                        <MudText Typo="Typo.h5"> @item.ItemName </MudText>
                                    </MudItem>
                                    <div style="margin-left: auto; align-content:center">
                                    <MudItem>
                                        <MudText Typo="Typo.h6"> Price: @item.Price </MudText>
                                    </MudItem>
                                    </div>
                                                                  
                                </MudGrid>
                                
                            </div>
                        </MudPaper>
                }
                </MudPaper>
            }

        </MudItem>
    </MudGrid>
}
else
{
<p>Loading...</p>
}

@code {
    private Shop[]? shops;

    private Items? shownItem;
    private bool editingItem = false;
    private bool addingItem = false;

    private int editingItemId = 0;

    private ItemsDTO itemToUpdate = new ItemsDTO();

    private bool showShop = false;
    private Shop shopToShow = new Shop();
    private List<Items> itemsToShow = new List<Items>();

    protected override async Task OnInitializedAsync()
    {
        await LoadShops();
    }

    private async Task LoadShops()
    {
        shops = await shopService.GetShopsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadShops();
    }

    private async Task DeleteShop(string shopName)
    {
        await shopService.DeleteShopAsync(shopName);
        await LoadShops();
        if (shopName == shopToShow.ShopName)
        {
            shopToShow = null;
            itemsToShow = new List<Items>();
            showShop = false;
        }
    }

    private async Task ShowShop(Shop shop)
    {
        shopToShow = shop; 
        var itemsFromShop = await ShopItemService.GetItemsInShop(shop.ShopName);
        itemsToShow = itemsFromShop.ToList();
        showShop = true;
    }

    private async Task EditShop(string shop)
    {
        navigationManager.NavigateTo($"/shopEdit/{shop}");
    }
    
    private async Task GoToShopPage(string shop)
    {
        navigationManager.NavigateTo($"/shopMain/{shop}");
    }

}
