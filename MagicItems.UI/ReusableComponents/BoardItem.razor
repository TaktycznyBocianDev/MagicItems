@using MagicItems.Shared.Models
@using MudBlazor

<div class="board-item">
    <MudPaper Class="board-item pa-3 ma-3">

        <MudGrid Justify="Justify.SpaceEvenly">

            @if (IsEditing)
            {
                <MudTextField @bind-Value="Item.ItemName" Label="Item Name" Variant="Variant.Outlined" />
                <MudSelect @bind-Value="Item.CategoryName" Required="true" T="string" Label="Rarities" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" RequiredError="Rarity is required!">
                    @foreach (var category in CategoryList)
                    {
                        <MudSelectItem Value="@(category.CategoryName)" />
                    }
                </MudSelect>
                <MudTextField @bind-Value="Item.Price" Label="Price" Variant="Variant.Outlined" />
                <MudIconButton OnClick="async () => await AddToPrice()" Icon="@Icons.Material.Filled.Add" aria-label="Add 100 to price" />
                <MudIconButton OnClick="async () => await SubtractFromPrice()" Icon="@Icons.Material.Filled.Remove" aria-label="Subtract 100 from price" />
                <MudTextField @bind-Value="Item.RarityName" Label="Rarity" Variant="Variant.Outlined" />
                <MudSelect @bind-Value="Item.RarityName" Required="true" T="string" Label="Rarities" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" RequiredError="Rarity is required!">
                    @foreach (var rarity in RarityList)
                    {
                        <MudSelectItem Value="@(rarity.RarityName)" />
                    }
                </MudSelect>
            }
            else
            {
                <MudText Typo="Typo.h6">@Item.ItemName</MudText>
                <MudText Typo="Typo.h6">Category: @Item.CategoryName</MudText>
                <MudText Typo="Typo.h6">Price: @Item.Price</MudText>
                <MudText Typo="Typo.h6">Rarity: @Item.RarityName</MudText>
                <MudIconButton OnClick="@(() => ShowItemDetails(Item))" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" aria-label="See item" Size="Size.Small"></MudIconButton>
            }

        </MudGrid>
    </MudPaper>
</div>

@code {
    [Parameter]
    public Items Item { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    //Get those from board
    [Parameter]
    public List<Category> CategoryList { get; set; } = new List<Category>();
    [Parameter]
    public List<Rarities> RarityList { get; set; } = new List<Rarities>();

    [Parameter] public EventCallback<Items> OnShowDetails { get; set; }

    private void ShowItemDetails(Items? item)
    {
        if (item != null)
        {
            OnShowDetails.InvokeAsync(item);
        }
    }

    private async Task AddToPrice()
    {
        Item.Price += 100;
    }

    private async Task SubtractFromPrice()
    {
        Item.Price = Item.Price >= 100 ? Item.Price - 100 : Item.Price;
    }
}
