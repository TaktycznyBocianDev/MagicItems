@using MagicItems.Shared.Models
@using MagicItems.UI.Services

@inject ItemsService itemService
@inject CategoryService categoryService
@inject RarityServicecs raritiesService

<MudItem xs="12" sm="7">
    <div class="updateItem-style">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="ItemToUpdate.ItemName" T="string" Label="Item Name" Required="true" RequiredError="Item name is required!" Counter="50" MaxLength="50"/>
                <MudSelect @bind-Value="ItemToUpdate.CategoryName" Required="true" T="string" Label="Categories" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" RequiredError="Category Name is required!">
                    @foreach (var item in CategoryList)
                    {
                        <MudSelectItem Value="@(item.CategoryName)" />
                    }
                </MudSelect>
                <MudTextField @bind-Value="ItemToUpdate.ShortDescription" T="string" HelperText="Max. 50 characters" Label="Short Description" Required="true" RequiredError="Short description is required!" AutoGrow Counter="50" MaxLength="50" />
                <MudTextField @bind-Value="ItemToUpdate.LongDescription" T="string" Label="Long Description" Required="true" RequiredError="Long description is required!"  AutoGrow />
                <MudNumericField Required="true" @bind-Value="ItemToUpdate.Price" Label="Price" Variant="Variant.Outlined" RequiredError="Price is required!" />
                <MudSelect @bind-Value="ItemToUpdate.RarityName" Required="true" T="string" Label="Rarities" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" RequiredError="Rarity is required!">
                    @foreach (var rarity in RarityList)
                    {
                        <MudSelectItem Value="@(rarity.RarityName)" />
                    }
                </MudSelect>
            </MudForm>
            <MudButton Variant="Variant.Filled" Style="background-color: red; color: white;" EndIcon="@Icons.Material.Filled.Cancel" DisableElevation="true" OnClick="@(OnEscape)">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Style="background-color: darkorange; color: white;" EndIcon="@Icons.Material.Filled.Update" DisableElevation="true" OnClick="@(async () => await EditItem())">Update Item</MudButton>

            @if (errors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                    @foreach (var error in errors)
                    {
                        <p>@error</p>
                    }
                </MudAlert>
            }
        </MudPaper>
    </div>
   
</MudItem>

@code {
    MudForm form;
    bool success = false;
    string[] errors = { };

    private Category[] CategoryList = { };
    private Rarities[] RarityList = { };

    [Parameter] public int originalItemId { get; set; } = 0;
    [Parameter] public ItemsDTO ItemToUpdate { get; set; } = new ItemsDTO();
    [Parameter] public Action OnEscape { get; set; } = () => { };
    [Parameter] public EventCallback OnItemUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadRarities();
    }

    private async Task LoadCategories()
    {
        CategoryList = await categoryService.GetCategoriesAsync();
    }

    private async Task LoadRarities()
    {
        RarityList = await raritiesService.GetRaritiesAsync();
    }

    private async Task<bool> IsDuplicateItemName(string itemName)
    {
        var items = await itemService.GetItemsAsync();
        return items.Any(i => i.ItemName.Equals(itemName, StringComparison.OrdinalIgnoreCase) && i.Id != originalItemId);
    }

    private async Task EditItem()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (await IsDuplicateItemName(ItemToUpdate.ItemName))
            {
                errors = new[] { "An item with this name already exists. Please choose a different name." };
                return;
            }

            await itemService.UpdateItemAsync(originalItemId, ItemToUpdate);
            await OnItemUpdated.InvokeAsync(null);
        }
    }
}
